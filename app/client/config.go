package client

import (
	"encoding/json"
	"flag"
	"io/ioutil"
	"time"

	"github.com/pkg/errors"
)

// CLIConf is for CLI arguments
type CLIConf struct {
	Conf         string // path to config
	User         string
	Host         string
	GenNumber    uint
	GenUpperCase bool
	GenDuration  string
}

var cliConf = &CLIConf{}

func init() {
	flag.StringVar(&cliConf.Conf, "conf", "", "path to config (./client.json)")
	flag.StringVar(&cliConf.User, "user", "", "user name")
	flag.StringVar(&cliConf.Host, "host", "", `server address "ws://[host]:[port]"`)
	flag.UintVar(&cliConf.GenNumber, "gen.number", 0, "number of autogenerated messages")
	flag.BoolVar(&cliConf.GenUpperCase, "gen.uppercase", false, "generated messages in upper case")
	flag.StringVar(&cliConf.GenDuration, "gen.duration", "", "generation session duration")
	flag.Parse()
}

// Conf is a structured client config
type Conf struct {
	User    string   `json:"user"`
	Host    string   `json:"host"`
	GenConf *GenConf `json:"gen,omitempty"`
}

// GenConf is configuration for the chat spam bot
type GenConf struct {
	Number    uint          `json:"number"`
	UpperCase bool          `json:"upper_case"`
	Duration  time.Duration `json:"duration"`
}

func (g *GenConf) UnmarshalJSON(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	cnf := &struct {
		Number    uint   `json:"number"`
		UpperCase bool   `json:"upper_case"`
		Duration  string `json:"duration"`
	}{}
	err := json.Unmarshal(data, cnf)
	if err != nil {
		return err
	}

	ts, err := time.ParseDuration(cnf.Duration)
	if err != nil {
		return errors.Wrapf(err, `wrong duration format: "%s"`, cnf.Duration)
	}

	g.Number = cnf.Number
	g.UpperCase = cnf.UpperCase
	g.Duration = ts
	return nil
}

// NewConf creates new client configuration
func NewConf() (*Conf, error) {
	c := &Conf{GenConf: &GenConf{}}
	if cliConf.Conf != "" {
		data, err := ioutil.ReadFile(cliConf.Conf)
		if err != nil {
			return nil, errors.Wrap(err, `failed to load config`)
		}
		if err := json.Unmarshal(data, c); err != nil {
			return nil, errors.Wrap(err, `failed to parse config`)
		}
	}
	if cliConf.User != "" {
		c.User = cliConf.User
	}
	if cliConf.Host != "" {
		c.Host = cliConf.Host
	}
	if cliConf.GenDuration != "" {
		duration, err := time.ParseDuration(cliConf.GenDuration)
		if err != nil {
			return nil, errors.Wrap(err, `failed to parse duration`)
		}
		c.GenConf.Duration = duration
	}

	if cliConf.GenNumber != 0 {
		c.GenConf.Number = cliConf.GenNumber
	}
	c.GenConf.UpperCase = cliConf.GenUpperCase
	return c, nil
}
